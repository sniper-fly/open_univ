情報ネットワークレポート

学生番号 221-008390-0
中井亮

タイトル： WebSocketの台頭とその仕組み

このトピックを選択した理由：
　最近仕事や普段読む技術記事でも、WebSocketの文言はよく見聞きする。
そもそもWebSocketとは何なのか、また大抵のウェブページはHTTPで動作するなか、
なぜWebSocketは生まれたのか、などその成り立ちや背景からWebSocketの仕組みを
詳細に理解しておきたかったため。

内容：
　AjaxやCometを用いて、ウェブページをリアルタイムに更新することはできるが、
HTTPプロトコルを使っている以上はそのボトルネックを解消できない。
WebSocketは、新しいプロトコルとAPIによってその問題を解決する技術として開発されている。
2011年12月11日には、WebSocketの仕様が「RFC 6455 - The WEbSocket Protocol」として
リリースされている。
　WebSocketは、Webサーバーとクライアントが一度接続を確立したあと、
その後すべての通信をHTTPではなく専用のプロトコルで行うことで、
JSONやXML、HTMLや画像など任意の形式のデータを送ることができる。
また、サーバーとクライアントのどちらからでも送信を行うことが可能である。
　主な特長が二点ある。
・サーバープッシュ機能
　サーバー側は、クライアントからのリクエストを待つこと無く、データを送ることが出来る。
これによって双方向のリアルタイムな通信が可能。
・通信量の削減
　WebSocketは接続を一度確立すると、接続を維持しようとする。
HTTPはコネクションレスなプロトコルであり、毎回のリクエストごとにたびたび接続を行うため
オーバーヘッドが多い。WebSocketはその分のオーバーヘッドがなく、
比較的ヘッダーのサイズも小さいため通信量を削減することが出来る。
　WebSocketで通信を行うには、HTTPのUpgradeヘッダーフィールドを使用してプロトコルの変更を
行うことでハンドシェイクを行う。
　また、このハンドシェイクリクエストに対するレスポンスは、「101 Switching Protocols」で返される。
これらのハンドシェイク後に、WebSocketにプロトコルを切り替えて通信を行う。　

意見・感想：
HTTPはコネクションレスで、シンプルに作りやすい一方、ウェブサイトの多様化で
リアルタイムに、速く通信をしないとならないケースも増加してきた。
そんな中、HTTPのコネクションレスな性質がボトルネックとなるのは
必然的な流れだったように思う。特に、WebSocketでサーバー側から
クライアントにデータを送信できるようになったのは大きい。
Ajaxでは、動的なウェブページを作ることが可能だが、リアルタイムに
サーバー側のデータを取得するためには、クライアントからリクエストを送り続けるしかなかった。
これは複数のクライアントを持つサーバーでは負担が大きいため、
WebSocketはそれを解決できる画期的な技術だと考えられる。

文献一覧：
上野宣 (2013). HTTPの教科書 翔泳社
